{"version":3,"sources":["handleData.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["decodeLiveVideoRefs","rawJSON","rawVideoEvidence","JSON","parse","Object","keys","map","key","getElapsedSecondsFromTimeString","timeString","components","split","parseInt","getVideoHost","url","videoHost","includes","json","refVideoRawData","require","refVideosInfo_temp","i_video","hasOwnProperty","videoTitle","media","refVideosInfo","TGCasesRawData","TGData","caseKey","datetime","caseSite","lat","lon","quantity","cartridge","allVideoEvidence","decodeTGCase","App","chosenCaseNum","elapsedSeconds","player","React","createRef","ref","playing","controls","onStart","current","seekTo","arrVideoEvidence","iVideoEvidence","iRefVideoCode","concat","toString","iVideoEvidenceArray","this","className","iURL","iElapsedSeconds","renderVideoPlayer","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i/3BAMA,SAASA,EAAoBC,GACzB,IAAIC,EAAmBC,KAAKC,MAAMH,GAOlC,OANuBI,OAAOC,KAAKJ,GAAkBK,KAAI,SAASC,GAE9D,MAAO,CAAC,aAAeA,EACf,eAAiBC,EAAgCP,EAAiBM,QA8BlF,SAASC,EAAgCC,GAErC,IAAIC,EAAaD,EAAWE,MAAM,KAElC,OADoD,KAAxBC,SAASF,EAAW,IAAkC,GAAxBE,SAASF,EAAW,IAASE,SAASF,EAAW,IAK/G,SAASG,EAAaC,GAElB,IAAIC,EAAmB,SASvB,OANID,EAAIE,SAAS,YACbD,EAAY,WACLD,EAAIE,SAAS,aACpBD,EAAY,WAGTA,EAMX,IAhDwBE,EAgDlBC,EAAkBC,EAAQ,IAG5BC,EAA+C,GAEnD,IAAK,IAAIC,KAAWH,EACZA,EAAgBI,eAAeD,KAC/BD,EAAmBC,GAtDjB,CACFP,KAFgBG,EAuD6BC,EAAgBG,IArDpD,IACTE,WAAYN,EAAI,YAChBO,MAAOP,EAAI,MACXF,UAAUF,EAAaI,EAAI,OAuD5B,IAAMQ,EAAgBL,EAKvBM,EAAiBP,EAAQ,IAGlBQ,EAAUvB,OAAOC,KAAKqB,GAAgBpB,KAAI,SAASC,GAE5D,OA5DJ,SAAsBqB,EAAeX,GACjC,MAAM,CACFY,SAAUZ,EAAI,cACda,SAAUb,EAAI,UACdc,IAAKd,EAAI,IACTe,IAAKf,EAAI,IACTgB,SAAUhB,EAAI,SACdiB,UAAWjB,EAAI,UACfkB,iBAAkBpC,EAAoBkB,EAAI,kBAoDvCmB,CAAa7B,EAAImB,EAAenB,OCxB5B8B,E,2MAtDNC,cAAuB,G,iFAEZxB,EAAWyB,GAE3B,IAAIC,EAASC,IAAMC,YASnB,OAAO,kBAAC,IAAD,CACCC,IAAKH,EACL1B,IAAKA,EACL8B,SAAS,EACTC,UAAU,EACVC,QAZR,WACMN,EAAOO,SACTP,EAAOO,QAAQC,OAAOT,Q,sCAgBZU,GAUd,OARmBA,EAAiB3C,KAAI,SAAS4C,GAE7C,IAAIC,EAAuBD,EAAc,aAEzC,OAD0BzB,EAAc0B,GAAd,IAAoCC,OAAO,MAAOF,EAAc,eAAmBG,iB,+BAQxG,IAAD,OACJC,EAAsB3B,EAAO4B,KAAKjB,cAAc,GAA1B,iBAC1B,OACE,yBAAKkB,UAAU,aACVF,EAAoBhD,KAAI,SAAA4C,GACvB,IAAIC,EAAuBD,EAAc,aACrCO,EAAchC,EAAc0B,GAAd,IACdO,EAAyBR,EAAc,eAC3C,OAAO,EAAKS,kBAAkBF,EAAMC,W,GAhD9BE,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5b7f92f9.chunk.js","sourcesContent":["import {TGCase, TGCasesJSON} from './Types'; \nimport {VideoRef, VideoRefJSON} from './Types'; \nimport {VideoEvidence} from './Types'; \n\n\n// Function for decoding the JSON-format live_video_refs in refVideoRawData\nfunction decodeLiveVideoRefs(rawJSON:string): VideoEvidence[]{\n    let rawVideoEvidence = JSON.parse(rawJSON);\n    let allVideoEvidence = Object.keys(rawVideoEvidence).map(function(key){\n\n        return {'refVideoCode':key, \n                'elapsedSeconds':getElapsedSecondsFromTimeString(rawVideoEvidence[key])}\n\n    });\n    return allVideoEvidence;\n\n}\n// Function for decoding the JSON-format refVideoRawData\nfunction decodeRefVideo(json:VideoRefJSON): VideoRef{\n    return{\n        url: json['url'],\n        videoTitle: json['video_title'], \n        media: json['media'],\n        videoHost:getVideoHost(json['url'])\n    }    \n}\n\n// Function for decoding the JSON-format TGCasesRawData\nfunction decodeTGCase(caseKey:string,json:TGCasesJSON): TGCase{\n    return{\n        datetime: json['case_datetime'],\n        caseSite: json['case_site'],\n        lat: json['lat'], \n        lon: json['lon'], \n        quantity: json['quantity'], \n        cartridge: json['cartridge'],\n        allVideoEvidence: decodeLiveVideoRefs(json['live_video_refs']),\n    }    \n}\n\n// Function for converting hh:mm:ss string to elapsed seconds\nfunction getElapsedSecondsFromTimeString(timeString: string):number{\n    // Presume the timeString is in the format of hh:mm:ss\n    let components = timeString.split(':');\n    let elapsedSeconds:number = parseInt(components[0])*3600 +parseInt(components[1])*60 + parseInt(components[2]);\n    return elapsedSeconds;\n}\n\n// Function for determing the host of the video \nfunction getVideoHost(url:string): string{\n\n    let videoHost:string = 'unkown';\n\n    // may need to consider shorten URLs in future \n    if (url.includes('facebook')){ \n        videoHost = 'facebook';\n    } else if (url.includes('youtube')){\n        videoHost = 'youtube';\n    }\n\n    return videoHost;\n}\n\n\n\n// Read the informaion of the live videos from the JSON file\nconst refVideoRawData = require('./Data/TG-livevideo_ref_df_lev1_compiled-20190911.json');\n\n// Parse the refVideoRawData and create a 'dictionary' contaning VideoRef objects\nvar refVideosInfo_temp: {[key:string]: VideoRef} = {};\n\nfor (var i_video in refVideoRawData){\n    if (refVideoRawData.hasOwnProperty(i_video)) {\n        refVideosInfo_temp[i_video] = decodeRefVideo(refVideoRawData[i_video])\n    }\n}\n\n// Export refVideoRawData directly for external uses\nexport const refVideosInfo = refVideosInfo_temp;\n\n\n\n// Read the information of all the TG cases from the JSON file\nconst TGCasesRawData = require('./Data/TG-Database_compiled-20190911.json');\n\n// Create an array of tg cases for external uses\nexport const TGData =  Object.keys(TGCasesRawData).map(function(key){\n\n    return decodeTGCase(key,TGCasesRawData[key]);\n\n});\n","import React, { Component} from 'react'\nimport ReactPlayer from 'react-player'\nimport {TGData,refVideosInfo} from './handleData'\nimport {VideoEvidence} from './Types'\n\n\n\nclass App extends Component {\n\n  //Configuration: chose the case id ()\n  public chosenCaseNum:number = 10;\n\n  renderVideoPlayer(url:string,elapsedSeconds:number){\n\n    let player = React.createRef<ReactPlayer>();\n\n    function handleVideoStart(){\n      if (player.current){\n        player.current.seekTo(elapsedSeconds)\n      }\n    }\n\n\n    return <ReactPlayer \n            ref={player}\n            url={url}\n            playing={false} \n            controls={true}\n            onStart={handleVideoStart}\n            />    \n\n  }\n\n  // Function for getting an array of url in the format of 'http://www.facebook.com/video/yyyyyy?t=xxxx'.\n  getCompiledURLs(arrVideoEvidence:VideoEvidence[]):string[]{\n\n    var compiledURLs = arrVideoEvidence.map(function(iVideoEvidence:VideoEvidence){\n\n        let iRefVideoCode:string = iVideoEvidence['refVideoCode'];\n        let iCompiledURL:string = refVideosInfo[iRefVideoCode]['url'].concat('?t=', iVideoEvidence['elapsedSeconds'].toString());\n        return iCompiledURL;\n\n    });\n\n    return compiledURLs;\n\n  }\n  render () {\n    var iVideoEvidenceArray = TGData[this.chosenCaseNum-1]['allVideoEvidence'];\n    return( \n      <div className=\"videosCol\">\n          {iVideoEvidenceArray.map(iVideoEvidence => {\n            let iRefVideoCode:string = iVideoEvidence['refVideoCode'];\n            let iURL:string = refVideosInfo[iRefVideoCode]['url'];\n            let iElapsedSeconds:number = iVideoEvidence['elapsedSeconds'];\n            return this.renderVideoPlayer(iURL, iElapsedSeconds)\n          })}\n      </div>\n\n    );\n  }\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}